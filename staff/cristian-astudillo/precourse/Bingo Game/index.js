/* PROYECTO TEMA 3: BINGO GAME! üé≤üé∞

Realiza un programa que simule un Bingo.
Cuando se ejecute, pedir√° el nombre del jugador y deber√° guardarse. 
Durante el primer turno se mostrar√° un cart√≥n con 15 n√∫meros (excluyendo el 0 siempre), 
para pasar al siguiente turno el usuario deber√° confirmar mediante confirm() visualiz√°ndose otro n√∫mero, 
si coincide con alguno de los existentes en el cart√≥n, cambiar√° por una "X" o un 0. 
El cart√≥n se mostrar√°, al final de cada turno, con los cambios efectuados, indicando al usuario qu√© n√∫mero se ha encontrado. 
El programa deber√° preguntar al usuario al inicio de cada turno si desea continuar, en caso de que se contin√∫e, 
seguir√° el mismo patr√≥n que hasta el momento.
Por supuesto, cuando todos los n√∫meros de una misma l√≠nea sean "X", mostrar√° un mensaje "L√çNEA!", pero la ejecuci√≥n seguir√°, 
el juego solo acabar√° cuando todos los n√∫meros est√©n a "X".
Cuando el juego concluya, deber√° decirle al usuario en cuantos turnos se ha completado el cart√≥n. Por √∫ltimo, deber√° preguntar si desea volver a jugar.
Comenzar por una versi√≥n muy peque√±a y b√°sica nos har√° tener un programa de principio a fin, es decir, que empieza, 
que acaba y haga lo que queramos a muy peque√±a escala, 
una vez lo tengamos todo bien dividido podremos empezar a extenderlo tanto como queramos.
Si funciona con 5 n√∫meros deber√° funcionar con 15, no? üòÅ

Requisitos de la versi√≥n m√≠nima:
- Cart√≥n con solo 5 n√∫meros, sin necesidad de ser generados random. Solo necesitamos un n√∫mero random cuando recorramos el cart√≥n y veamos si hay alguna coincidencia. 
No necesitamos asegurarnos que el n√∫mero random de cada turno no haya salido en turnos anteriores, recuerda que estamos en la m√≠nima versi√≥n posible, 
eso ya lo solucionaremos. 
- Si hay coincidencia, vamos a reemplazar el n√∫mero por una 'X' y mostramos el cart√≥n modificado
Separarlo todo en funciones, englobado en una funci√≥n global llamada bingo(), tal que:

function() => Generar Numero Random Bombo
function() => Nuevo turno (Match carton[i] === randomNum)
function() => Preguntar Nuevo Turno

PRO
‚óè	Cuando se muestre la carta, se preguntar√° al usuario si realmente quiere ese cart√≥n o generar otro, si realmente quiere ese cart√≥n, 
    deber√° responder "Yes" para proceder.
‚óè	Establece un sistema de puntos, en cuantos m√°s turnos se complete el cart√≥n, menos puntos (el sistema de puntos int√©gralo como quieras),
    por el contrario, a menos turnos, m√°s puntos.
‚óè	Antes de empezar el juego, muestra el sistema de puntos al usuario.
‚óè	Ranking de usuarios (ordenado por puntos).

var bingoCard = [
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    //next line
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false },
    { number: randomNumber, matched: false }
];

 */

//CREAR CART√ìN BINGO
//N√öMEROS ALEATORIOS PARA CREAR CART√ìN.
function randoms() {
    var number1 = Math.ceil(Math.random() * 40);
    var number2 = Math.ceil(Math.random() * 40);
    var number3 = Math.ceil(Math.random() * 40);

    { return number1, number2, number3 };
};

//FACTORY FUNCTIONS PARA CREAR CART√ìN.
function numerosCarton() {
    return {
        numero1: randoms(), match1: 0,
        numero2: randoms(), match2: 0,
        numero3: randoms(), match3: 0
    };
}

//CARTON CREADO.
var numero = 5;
var cartonBingo = [];
for (let i = 1; i <= numero; i++) {
    var carton = { ...numerosCarton() };
    cartonBingo.push(carton);
}

//CART√ìN BINGO DEFINITIVO.
let cartonBingo2 = []
var linea1 = cartonBingo.map(item => item.numero1);
var linea2 = cartonBingo.map(item => item.numero2);
var linea3 = cartonBingo.map(item => item.numero3);
cartonBingo2.push(linea1, linea2, linea3);


//NUMEROS BOMBO SIN REPETICIONES.
let tombola = [];
for (let randomNumber = 1; randomNumber < 60; randomNumber++) {
    let random = Math.ceil(Math.random() * 60);
    if (tombola.indexOf(random) == -1) {
        tombola.push(random);
    } else {
        randomNumber--;
    };
};

//console.log(tombola);

//CONTADOR VUELTAS Y SI HAY COINCIDENCIA DE L√çNEA. 
let vueltas = 0;
let lineaMatched = false;

//INICIO BINGO.
function bingo() {
    alert("Hola participante!! Bienvenido al Bingo Skylab Coders Game, donde tus sue√±os se pueden hacer realidad!!..." +
        "Para poder participar en este concurso, necesitamos algunos datos... ");
    var nombre = prompt("Nos podr√≠as decir tu nombre ?(Si no contestas o cancelas, el juego se termina de manera abrupta).").toUpperCase();
    if (nombre === "" || nombre === null) {
        return alert("Adi√≥s!!");
    }

    alert(`Bienvenido ${nombre}.`);
    alert("Las reglas del juego son las siguientes : la pantalla mostrar√° un cart√≥n de 15 n√∫meros con 3 l√≠neas de 5 n√∫meros cada uno, " +
        " y luego, el n√∫mero correspondiente del bombo; si coincide con alg√∫n n√∫mero del cart√≥n, se tachar√° con una 'X', y si tacha alguna l√≠nea " +
        "se cantar√° 'L√çNEA!!', y si se completa el cart√≥n ... BINGO!!!.");

    alert("A continuaci√≥n, daremos comienzo al Bingo Skylab Coders Game....");
    alert("... Y empezamos!!!");
    alert("A continuaci√≥n, hacemos entrega de su cart√≥n para poder participar:");
    alert("CART√ìN BINGO = " + JSON.stringify(cartonBingo2));
    alert("Ahora daremos comienzo al Bingo Skylab Coders!!...");

    //SI HAY COINCIDENCIA ENTRE EL N√öMERO BOMBO Y N√öMERO CART√ìN.
    function inicio() {
        alert("... Y vamos girando el bombo, el n√∫mero que sale ahora es el...");
        alert(`N√∫mero ${JSON.stringify(tombola[0])}!!`);
        for (let r = 0; r < cartonBingo2.length; r++) {
            for (let c = 0; c < cartonBingo2[r].length; c++) {
                if (cartonBingo2[r][c] === tombola[0]) {
                    alert("COINCIDE!!!!");
                    cartonBingo2[r][c] = "X"
                    alert("CART√ìN BINGO = " + JSON.stringify(cartonBingo2));
                };
            };
        };

        //SE ELIMINA CADA VEZ QUE SALE UN N√öMERO DEL BOMBO PARA QUE SALGA EL SIGUENTE.
        tombola.splice(0, 1);

        //CONTADOR VUELTA.
        vueltas++;

        //ARRAY DE L√çNEAS PARA LUEGO COMPROBAR SI SE TACHA L√çNEA.
        let totalLineas = [];

        var linea1 = cartonBingo2[0].every(nro => typeof nro === "string");
        var linea2 = cartonBingo2[1].every(nro => typeof nro === "string");
        var linea3 = cartonBingo2[2].every(nro => typeof nro === "string");

        totalLineas.push(linea1, linea2, linea3);

        //SI HAY L√çNEA COMPLETA Y CANTAR UNA SOLA VEZ.       
        for (let i = 0; i < totalLineas.length; i++) {
            if (totalLineas[i] === true && lineaMatched === false) {
                alert("L√çNEA!!!!!");
                totalLineas.splice(i, 1);
                lineaMatched = true;
                i--
            }
        }

        //CART√ìN BINGO COMPLETADO
        if (linea1 && linea2 && linea3) {
            alert("HAS COMPLETADO LAS 3 LINEAS!!!!")
            alert("BINGO!!!!!");
            alert("FELICIDADES!!! HA GANADO EL PREMIO MAYOR!!!");
            return alert(" Muchas Gracias por participar en el Bingo Skylab Coders Game,"
                + " donde sus sue√±os se pueden hacer realidad!!...");
        };

        inicio();

    };

    inicio();

    //RANKING NOMBRE Y VUELTAS.
    const listadoRanking = (name, matches) => {
        return {
            name: nombre,
            matches: vueltas
        };
    };

    const rankingFinal = listadoRanking(vueltas, nombre);
    alert("Ranking Bingo Skylab Coders Game:")
    alert(JSON.stringify(`Participante : ${rankingFinal.name} , Total Vueltas : ${rankingFinal.matches}`));
    return alert("gracias por jugar al Bingo Skylab Coders Game!!... que tenga un buen d√≠a..");

};

bingo();

